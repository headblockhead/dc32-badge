name: CMake
on: [push, pull_request]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        echo "Cleaning up previous run"
        rm -rf "${{ github.workspace }}"
        mkdir -p "${{ github.workspace }}"

    - name: Checkout dc32-badge
      uses: actions/checkout@v2
      with:
        path: dc32-badge

    - name: Checkout dc32-badge submodules
      working-directory: ${{github.workspace}}/dc32-badge
      run: git submodule update --init

    - name: Checkout pico-sdk submodules
      working-directory: ${{github.workspace}}/dc32-badge/pico-sdk
      run: git submodule update --init

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      working-directory: ${{github.workspace}}/pico-examples
      run:  cmake -E make_directory ${{github.workspace}}/pico-examples/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/pico-examples/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Get core count
      id: core_count
      run : cat /proc/cpuinfo  | grep processor | wc -l

    - name: Build
      working-directory: ${{github.workspace}}/pico-examples/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE --parallel $(nproc)
